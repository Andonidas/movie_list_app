{"ast":null,"code":"import ACTION_TYPES from \"./actionTypes\";\nimport STATUS_TYPE from \"../reducers/statusTypes\";\nimport fetchMovieDetails from \"../api/fetchMovieDetails\";\n\nconst startFetchMovie = movieID => ({\n  type: ACTION_TYPES.movieDetails.cacheMovieStart,\n  payload: movieID\n});\n\nconst failedFetchMovie = movieID => ({\n  type: ACTION_TYPES.movieDetails.cacheMovieFailed,\n  payload: movieID\n});\n\nconst cacheMovie = data => ({\n  type: ACTION_TYPES.movieDetails.cacheMovieSuccess,\n  payload: data\n});\n\nconst fetchSaveMovie = movieID => (dispatch, getState) => {\n  const movie = getState().movieDetails.cachedMovies[movieID];\n\n  if (movie && movie.status === STATUS_TYPE.start) {\n    // console.log(`fetch for movie ${movieID} is in progress`);\n    return;\n  }\n\n  if (movie && movie.status === STATUS_TYPE.success) {\n    // console.log(`movie ${movieID} is cached`);\n    return;\n  }\n\n  dispatch(startFetchMovie(movieID)); // fetch started\n\n  fetchMovieDetails(movieID).then(response => dispatch(cacheMovie(response.data))) // fetch sucess, cache data\n  .catch(error => {\n    console.log(error);\n    dispatch(failedFetchMovie(movieID)); // fetch failed\n  });\n};\n\nexport { fetchSaveMovie };","map":{"version":3,"names":["ACTION_TYPES","STATUS_TYPE","fetchMovieDetails","startFetchMovie","movieID","type","movieDetails","cacheMovieStart","payload","failedFetchMovie","cacheMovieFailed","cacheMovie","data","cacheMovieSuccess","fetchSaveMovie","dispatch","getState","movie","cachedMovies","status","start","success","then","response","catch","error","console","log"],"sources":["/Users/qiluan/Desktop/scripts/training/last_project/movie_list_app/movie_list/src/actionCreators/movieDetailsActionCreator.js"],"sourcesContent":["import ACTION_TYPES from \"./actionTypes\";\nimport STATUS_TYPE from \"../reducers/statusTypes\";\nimport fetchMovieDetails from \"../api/fetchMovieDetails\";\n\nconst startFetchMovie = (movieID) => ({\n  type: ACTION_TYPES.movieDetails.cacheMovieStart,\n  payload: movieID,\n});\n\nconst failedFetchMovie = (movieID) => ({ \n  type: ACTION_TYPES.movieDetails.cacheMovieFailed,\n  payload: movieID,\n});\n\nconst cacheMovie = (data) => ({\n  type: ACTION_TYPES.movieDetails.cacheMovieSuccess,\n  payload: data,\n});\n\nconst fetchSaveMovie = (movieID) => (dispatch, getState) => {\n  const movie = getState().movieDetails.cachedMovies[movieID];\n  if (movie && movie.status === STATUS_TYPE.start) {\n    // console.log(`fetch for movie ${movieID} is in progress`);\n    return;\n  }\n\n  if (movie && movie.status === STATUS_TYPE.success) {\n    // console.log(`movie ${movieID} is cached`);\n    return;\n  }\n\n  dispatch(startFetchMovie(movieID)); // fetch started\n  fetchMovieDetails(movieID)\n    .then(response => dispatch(cacheMovie(response.data))) // fetch sucess, cache data\n    .catch(error => {\n      console.log(error);\n      dispatch(failedFetchMovie(movieID)); // fetch failed\n    })\n}\n\n\nexport { fetchSaveMovie };"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;;AAEA,MAAMC,eAAe,GAAIC,OAAD,KAAc;EACpCC,IAAI,EAAEL,YAAY,CAACM,YAAb,CAA0BC,eADI;EAEpCC,OAAO,EAAEJ;AAF2B,CAAd,CAAxB;;AAKA,MAAMK,gBAAgB,GAAIL,OAAD,KAAc;EACrCC,IAAI,EAAEL,YAAY,CAACM,YAAb,CAA0BI,gBADK;EAErCF,OAAO,EAAEJ;AAF4B,CAAd,CAAzB;;AAKA,MAAMO,UAAU,GAAIC,IAAD,KAAW;EAC5BP,IAAI,EAAEL,YAAY,CAACM,YAAb,CAA0BO,iBADJ;EAE5BL,OAAO,EAAEI;AAFmB,CAAX,CAAnB;;AAKA,MAAME,cAAc,GAAIV,OAAD,IAAa,CAACW,QAAD,EAAWC,QAAX,KAAwB;EAC1D,MAAMC,KAAK,GAAGD,QAAQ,GAAGV,YAAX,CAAwBY,YAAxB,CAAqCd,OAArC,CAAd;;EACA,IAAIa,KAAK,IAAIA,KAAK,CAACE,MAAN,KAAiBlB,WAAW,CAACmB,KAA1C,EAAiD;IAC/C;IACA;EACD;;EAED,IAAIH,KAAK,IAAIA,KAAK,CAACE,MAAN,KAAiBlB,WAAW,CAACoB,OAA1C,EAAmD;IACjD;IACA;EACD;;EAEDN,QAAQ,CAACZ,eAAe,CAACC,OAAD,CAAhB,CAAR,CAZ0D,CAYtB;;EACpCF,iBAAiB,CAACE,OAAD,CAAjB,CACGkB,IADH,CACQC,QAAQ,IAAIR,QAAQ,CAACJ,UAAU,CAACY,QAAQ,CAACX,IAAV,CAAX,CAD5B,EACyD;EADzD,CAEGY,KAFH,CAESC,KAAK,IAAI;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACAV,QAAQ,CAACN,gBAAgB,CAACL,OAAD,CAAjB,CAAR,CAFc,CAEuB;EACtC,CALH;AAMD,CAnBD;;AAsBA,SAASU,cAAT"},"metadata":{},"sourceType":"module"}